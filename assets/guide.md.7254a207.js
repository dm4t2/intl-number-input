import{_ as n,c as a,o as t,a as s}from"./app.23660e5f.js";const m='{"title":"Guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Usage","slug":"usage"}],"relativePath":"guide.md","lastUpdated":1644699111751}',e={},o=s(`<h1 id="guide" tabindex="-1">Guide <a class="header-anchor" href="#guide" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Intl Number Input allows an easy input of formatted numbers based on the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat" target="_blank" rel="noopener noreferrer">ECMAScript Internationalization API (Intl.NumberFormat)</a>.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><p>Install the npm package:</p><div class="language-bash"><pre><code><span class="token function">npm</span> <span class="token function">install</span> intl-number-input
<span class="token comment"># or</span>
<span class="token function">yarn</span> <span class="token function">add</span> intl-number-input
</code></pre></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><p>Create a <code>NumberInput</code> instance, passing an <code>&lt;input type=&quot;text&quot;&gt;</code> element and the options of your choice.</p><div class="language-javascript"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> NumberInput <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;intl-number-input&#39;</span>

<span class="token keyword">const</span> numberInput <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumberInput</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  el<span class="token operator">:</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  options<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// see config reference</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// set initial value</span>
numberInput<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>
</code></pre></div><p>Edit example on <a href="https://stackblitz.com/edit/typescript-wzvyz7?file=index.ts" target="_blank" rel="noopener noreferrer">Stackblitz</a>.</p>`,10),p=[o];function c(i,r,l,u,d,k){return t(),a("div",null,p)}var f=n(e,[["render",c]]);export{m as __pageData,f as default};
